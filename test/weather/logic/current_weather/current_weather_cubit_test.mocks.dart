// Mocks generated by Mockito 5.4.4 from annotations
// in simple_weather/test/weather/logic/current_weather/current_weather_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:geolocator/geolocator.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_weather/weather/data/interfaces/weather_provider.dart'
    as _i3;
import 'package:simple_weather/weather/data/models/weather.dart' as _i2;
import 'package:simple_weather/weather/data/providers/geo_localization_provider.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherResponse_0 extends _i1.SmartFake
    implements _i2.WeatherResponse {
  _FakeWeatherResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherProvider extends _i1.Mock implements _i3.WeatherProvider {
  MockWeatherProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.WeatherResponse> fetchWeatherByCoordinates({
    required double? lat,
    required double? long,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWeatherByCoordinates,
          [],
          {
            #lat: lat,
            #long: long,
          },
        ),
        returnValue:
            _i4.Future<_i2.WeatherResponse>.value(_FakeWeatherResponse_0(
          this,
          Invocation.method(
            #fetchWeatherByCoordinates,
            [],
            {
              #lat: lat,
              #long: long,
            },
          ),
        )),
      ) as _i4.Future<_i2.WeatherResponse>);
}

/// A class which mocks [GeoLocalizationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoLocalizationProvider extends _i1.Mock
    implements _i5.GeoLocalizationProvider {
  MockGeoLocalizationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Position?> getCoordinates() => (super.noSuchMethod(
        Invocation.method(
          #getCoordinates,
          [],
        ),
        returnValue: _i4.Future<_i6.Position?>.value(),
      ) as _i4.Future<_i6.Position?>);
}
